@article{http2,
  author  = {Stenberg, Daniel},
  year    = {2014},
  month   = {07},
  pages   = {120-128},
  title   = {HTTP2 explained},
  volume  = {44},
  journal = {ACM SIGCOMM Computer Communication Review},
  doi     = {10.1145/2656877.2656896}
}

@unknown{http3,
  author = {Trevisan, Martino and Giordano, Danilo and Drago, Idilio and Safari Khatouni, Ali},
  year   = {2021},
  month  = {02},
  pages  = {},
  title  = {Measuring HTTP/3: Adoption and Performance}
}

@article{open_restful_api_analysis,
  author  = {Neumann, Andy and Laranjeiro, Nuno and Bernardino, Jorge},
  year    = {2021},
  month   = {07},
  pages   = {957-970},
  title   = {An Analysis of Public REST Web Service APIs},
  volume  = {14},
  journal = {IEEE Transactions on Services Computing},
  doi     = {10.1109/TSC.2018.2847344}
}

@phdthesis{rest_proposal,
  author   = {Fielding, Roy Thomas and Taylor, Richard N.},
  title    = {Architectural Styles and the Design of Network-Based Software Architectures},
  year     = {2000},
  isbn     = {0599871180},
  school   = {University of California, Irvine},
  abstract = {The World Wide Web has succeeded in large part because its software architecture has been designed to meet the needs of an Internet-scale distributed hypermedia system. The Web has been iteratively developed over the past ten years through a series of modifications to the standards that define its architecture. In order to identify those aspects of the Web that needed improvement and avoid undesirable modifications, a model for the modern Web architecture was needed to guide its design, definition, and deployment. Software architecture research investigates methods for determining how best to partition a system, how components identify and communicate with each other, how information is communicated, how elements of a system can evolve independently, and how all of the above can be described using formal and informal notations. My work is motivated by the desire to understand and evaluate the architectural design of network-based application software through principled use of architectural constraints, thereby obtaining the functional, performance, and social properties desired of an architecture. An architectural style is a named, coordinated set of architectural constraints. This dissertation defines a framework for understanding software architecture via architectural styles and demonstrates how styles can be used to guide the architectural design of network-based application software. A survey of architectural styles for network-based applications is used to classify styles according to the architectural properties they induce on an architecture for distributed hypermedia. I then introduce the Representational State Transfer (REST) architectural style and describe how REST has been used to guide the design and development of the architecture for the modern Web. REST emphasizes scalability of component interactions, generality of interfaces, independent deployment of components, and intermediary components to reduce interaction latency, enforce security, and encapsulate legacy systems. I describe the software engineering principles guiding REST and the interaction constraints chosen to retain those principles, contrasting them to the constraints of other architectural styles. Finally, I describe the lessons learned from applying REST to the design of the Hypertext Transfer Protocol and Uniform Resource Identifier standards, and from their subsequent deployment in Web client and server software.},
  note     = {AAI9980887}
}

@article{websockets,
  author  = {Qigang, Liu and Sun, Xiangyang},
  year    = {2012},
  month   = {01},
  pages   = {797-801},
  title   = {Research of Web Real-Time Communication Based on Web Socket},
  volume  = {05},
  journal = {International Journal of Communications, Network and System Sciences},
  doi     = {10.4236/ijcns.2012.512083}
}

@article{nodejs_challenges_in_implementation,
  author  = {Shah, Hezbullah and Soomro, Tariq},
  year    = {2017},
  month   = {05},
  pages   = {72-83},
  title   = {Node.js Challenges in Implementation},
  volume  = {17},
  journal = {Global Journal of Computer Science and Technology}
}

@inprocedings{merits_of_nosql,
  author    = {Jose, Benymol and Abraham, Sajimon},
  booktitle = {2017 International Conference on Networks & Advances in Computational Technologies (NetACT)},
  title     = {Exploring the merits of nosql: A study based on mongodb},
  year      = {2017},
  volume    = {},
  number    = {},
  pages     = {266-271},
  doi       = {10.1109/NETACT.2017.8076778}
}
@online{pictlstm,
 author  = "Guillaume Chevalier, CC BY-SA 4.0 via Wikimedia Commons",
 title   = "Schematic of the Long-Short Term Memory cell, a component of recurrent neural networks",
 year    = "2021",
 urlseen = "05-10-23",
 url     = "https://commons.wikimedia.org/wiki/File:LSTM_Cell.svg"
}
@article{10.1145/2692956.2663188,
author = {Matsakis, Nicholas D. and Klock, Felix S.},
title = {The Rust Language},
year = {2014},
issue_date = {December 2014},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {34},
number = {3},
issn = {1094-3641},
url = {https://doi.org/10.1145/2692956.2663188},
doi = {10.1145/2692956.2663188},
abstract = {Rust is a new programming language for developing reliable and efficient systems. It is designed to support concurrency and parallelism in building applications and libraries that take full advantage of modern hardware. Rust's static type system is safe1 and expressive and provides strong guarantees about isolation, concurrency, and memory safety.Rust also offers a clear performance model, making it easier to predict and reason about program efficiency. One important way it accomplishes this is by allowing fine-grained control over memory representations, with direct support for stack allocation and contiguous record storage. The language balances such controls with the absolute requirement for safety: Rust's type system and runtime guarantee the absence of data races, buffer overflows, stack overflows, and accesses to uninitialized or deallocated memory.},
journal = {Ada Lett.},
month = {oct},
pages = {103–104},
numpages = {2},
keywords = {rust, memory management, systems programming, affine type systems}
}

@inproceedings{rust1,
author = {Matsakis, Nicholas D. and Klock, Felix S.},
title = {The Rust Language},
year = {2014},
isbn = {9781450332170},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2663171.2663188},
doi = {10.1145/2663171.2663188},
abstract = {Rust is a new programming language for developing reliable and efficient systems. It is designed to support concurrency and parallelism in building applications and libraries that take full advantage of modern hardware. Rust's static type system is safe1 and expressive and provides strong guarantees about isolation, concurrency, and memory safety.Rust also offers a clear performance model, making it easier to predict and reason about program efficiency. One important way it accomplishes this is by allowing fine-grained control over memory representations, with direct support for stack allocation and contiguous record storage. The language balances such controls with the absolute requirement for safety: Rust's type system and runtime guarantee the absence of data races, buffer overflows, stack overflows, and accesses to uninitialized or deallocated memory.},
booktitle = {Proceedings of the 2014 ACM SIGAda Annual Conference on High Integrity Language Technology},
pages = {103–104},
numpages = {2},
keywords = {affine type systems, rust, memory management, systems programming},
location = {Portland, Oregon, USA},
series = {HILT '14}
}
@article{rust2,
author = {Jung, Ralf and Jourdan, Jacques-Henri and Krebbers, Robbert and Dreyer, Derek},
title = {RustBelt: Securing the Foundations of the Rust Programming Language},
year = {2017},
issue_date = {January 2018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {POPL},
url = {https://doi.org/10.1145/3158154},
doi = {10.1145/3158154},
abstract = {Rust is a new systems programming language that promises to overcome the seemingly fundamental tradeoff between high-level safety guarantees and low-level control over resource management. Unfortunately, none of Rust's safety claims have been formally proven, and there is good reason to question whether they actually hold. Specifically, Rust employs a strong, ownership-based type system, but then extends the expressive power of this core type system through libraries that internally use unsafe features. In this paper, we give the first formal (and machine-checked) safety proof for a language representing a realistic subset of Rust. Our proof is extensible in the sense that, for each new Rust library that uses unsafe features, we can say what verification condition it must satisfy in order for it to be deemed a safe extension to the language. We have carried out this verification for some of the most important libraries that are used throughout the Rust ecosystem.},
journal = {Proc. ACM Program. Lang.},
month = {dec},
articleno = {66},
numpages = {34},
keywords = {logical relations, concurrency, Rust, type systems, separation logic}
}
@INPROCEEDINGS{python1,
  author={Nagpal, Abhinav and Gabrani, Goldie},
  booktitle={2019 Amity International Conference on Artificial Intelligence (AICAI)}, 
  title={Python for Data Analytics, Scientific and Technical Applications}, 
  year={2019},
  volume={},
  number={},
  pages={140-145},
  doi={10.1109/AICAI.2019.8701341}}
@INPROCEEDINGS{python2,
  author={Kumar, Arun and Panda, Supriya.P.},
  booktitle={2019 International Conference on Machine Learning, Big Data, Cloud and Parallel Computing (COMITCon)}, 
  title={A Survey: How Python Pitches in IT-World}, 
  year={2019},
  volume={},
  number={},
  pages={248-251},
  doi={10.1109/COMITCon.2019.8862251}}
@BOOK{tensorflow1,
  author={Bileschi, Stanley and Cai, Shanqing and Nielsen, Eric},
  booktitle={Deep Learning with JavaScript: Neural networks in TensorFlow.js},
  year={2020},
  volume={},
  number={},
  pages={},
  doi={}
}
@BOOK{tensorflow2,
  author={Duerr, Oliver and Sick, Beate},
  booktitle={Probabilistic Deep Learning: With Python, Keras and TensorFlow Probability},
  year={2020},
  volume={},
  number={},
  pages={},
  doi={}
}
@inproceedings{docker1,
  title={CoMA: Resource Monitoring of Docker Containers.},
  author={Jim{\'e}nez, Lara Lorna and Sim{\'o}n, Miguel G{\'o}mez and Schel{\'e}n, Olov and Kristiansson, Johan and Synnes, K{\aa}re and {\AA}hlund, Christer},
  booktitle={CLOSER},
  pages={145--154},
  year={2015}
}
@INPROCEEDINGS{docker2,
  author={Brogi, Antonio and Neri, Davide and Soldani, Jacopo},
  booktitle={2017 IEEE International Conference on Cloud Engineering (IC2E)}, 
  title={DockerFinder: Multi-attribute Search of Docker Images}, 
  year={2017},
  volume={},
  number={},
  pages={273-278},
  doi={10.1109/IC2E.2017.41}}
@INPROCEEDINGS{docker3,
  author={Dhakate, Suchit and Godbole, Anand},
  booktitle={2015 Annual IEEE India Conference (INDICON)}, 
  title={Distributed cloud monitoring using Docker as next generation container virtualization technology}, 
  year={2015},
  volume={},
  number={},
  pages={1-5},
  doi={10.1109/INDICON.2015.7443771}}
@INPROCEEDINGS{kafka1,
  author={Wu, Han and Shang, Zhihao and Wolter, Katinka},
  booktitle={2019 IEEE International Symposium on Software Reliability Engineering Workshops (ISSREW)}, 
  title={TRAK: A Testing Tool for Studying the Reliability of Data Delivery in Apache Kafka}, 
  year={2019},
  volume={},
  number={},
  pages={394-397},
  doi={10.1109/ISSREW.2019.00101}}
@INPROCEEDINGS{kafka2,
  author={Shree, Rishika and Choudhury, Tanupriya and Gupta, Subhash Chand and Kumar, Praveen},
  booktitle={2017 2nd International Conference on Telecommunication and Networks (TEL-NET)}, 
  title={KAFKA: The modern platform for data management and analysis in big data domain}, 
  year={2017},
  volume={},
  number={},
  pages={1-5},
  doi={10.1109/TEL-NET.2017.8343593}}

@misc{lee2023repad2,
      title={RePAD2: Real-Time, Lightweight, and Adaptive Anomaly Detection for Open-Ended Time Series}, 
      author={Ming-Chang Lee and Jia-Chun Lin},
      year={2023},
      eprint={2303.00409},
      archivePrefix={arXiv},
      primaryClass={cs.LG}
}
